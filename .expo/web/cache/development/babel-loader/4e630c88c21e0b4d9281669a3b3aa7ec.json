{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\sugan\\\\workspace\\\\WhitehatProjects\\\\MonkeyChunkyForked\\\\Monkey-Chunky\\\\App.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { Header } from 'react-native-elements';\nimport db from \"./localdb\";\nimport PhonicSoundButton from \"./components/PhonicSoundButton\";\n\nvar App = function (_React$Component) {\n  _inherits(App, _React$Component);\n\n  var _super = _createSuper(App);\n\n  function App() {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _super.call(this);\n    _this.state = {\n      text: '',\n      chunks: [],\n      phonicSounds: []\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(View, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 7\n        }\n      }, React.createElement(Header, {\n        backgroundColor: '#9c8210',\n        centerComponent: {\n          text: 'Monkey Chunky',\n          style: {\n            color: '#fff',\n            fontSize: 20\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 9\n        }\n      }), React.createElement(Image, {\n        style: styles.imageIcon,\n        source: {\n          uri: 'https://www.shareicon.net/data/128x128/2015/08/06/80805_face_512x512.png'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 9\n        }\n      }), React.createElement(TextInput, {\n        style: styles.inputBox,\n        onChangeText: function onChangeText(text) {\n          _this2.setState({\n            text: text\n          });\n        },\n        value: this.state.text,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 9\n        }\n      }), React.createElement(TouchableOpacity, {\n        style: styles.goButton,\n        onPress: function onPress() {\n          var word = _this2.state.text.toLowerCase().trim();\n\n          db[word] ? (_this2.setState({\n            chunks: db[word].chunks\n          }), _this2.setState({\n            phonicSounds: db[word].phones\n          })) : Alert.alert(\"The word does not exist in our database\");\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 9\n        }\n      }, React.createElement(Text, {\n        style: styles.buttonText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }\n      }, \"GO\")), React.createElement(View, {\n        style: {\n          flexDirection: \"row\",\n          alignSelf: \"center\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 9\n        }\n      }, this.state.chunks.map(function (item, index) {\n        return React.createElement(PhonicSoundButton, {\n          wordChunk: _this2.state.chunks[index],\n          soundChunk: _this2.state.phonicSounds[index],\n          buttonIndex: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 15\n          }\n        });\n      })));\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nexport { App as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#b8b8b8'\n  },\n  inputBox: {\n    marginTop: 50,\n    width: '80%',\n    alignSelf: 'center',\n    height: 40,\n    textAlign: 'center',\n    borderWidth: 4,\n    borderRadius: 20\n  },\n  goButton: {\n    width: '50%',\n    height: 55,\n    alignSelf: 'center',\n    padding: 10,\n    margin: 10\n  },\n  buttonText: {\n    textAlign: 'center',\n    fontSize: 30,\n    fontWeight: 'bold'\n  },\n  imageIcon: {\n    width: 150,\n    height: 150,\n    marginLeft: 95\n  }\n});","map":{"version":3,"sources":["C:/Users/sugan/workspace/WhitehatProjects/MonkeyChunkyForked/Monkey-Chunky/App.js"],"names":["React","Header","db","PhonicSoundButton","App","state","text","chunks","phonicSounds","styles","container","style","color","fontSize","imageIcon","uri","inputBox","setState","goButton","word","toLowerCase","trim","phones","Alert","alert","buttonText","flexDirection","alignSelf","map","item","index","Component","StyleSheet","create","flex","backgroundColor","marginTop","width","height","textAlign","borderWidth","borderRadius","padding","margin","fontWeight","marginLeft"],"mappings":";;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;;;;;;AAUA,SAASC,MAAT,QAAuB,uBAAvB;AACA,OAAOC,EAAP;AACA,OAAOC,iBAAP;;IAEqBC,G;;;;;AACnB,iBAAc;AAAA;;AAAA;;AACZ;AACA,UAAKC,KAAL,GAAa;AACXC,MAAAA,IAAI,EAAE,EADK;AAEXC,MAAAA,MAAM,EAAE,EAFG;AAGXC,MAAAA,YAAY,EAAE;AAHH,KAAb;AAFY;AAOb;;;;6BACQ;AAAA;;AACP,aACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEC,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,MAAD;AACE,QAAA,eAAe,EAAE,SADnB;AAEE,QAAA,eAAe,EAAE;AACfJ,UAAAA,IAAI,EAAE,eADS;AAEfK,UAAAA,KAAK,EAAE;AAAEC,YAAAA,KAAK,EAAE,MAAT;AAAiBC,YAAAA,QAAQ,EAAE;AAA3B;AAFQ,SAFnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EASE,oBAAC,KAAD;AACE,QAAA,KAAK,EAAEJ,MAAM,CAACK,SADhB;AAEE,QAAA,MAAM,EAAE;AACNC,UAAAA,GAAG,EACD;AAFI,SAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QATF,EAiBE,oBAAC,SAAD;AACE,QAAA,KAAK,EAAEN,MAAM,CAACO,QADhB;AAEE,QAAA,YAAY,EAAE,sBAAAV,IAAI,EAAI;AACpB,UAAA,MAAI,CAACW,QAAL,CAAc;AAAEX,YAAAA,IAAI,EAAEA;AAAR,WAAd;AACD,SAJH;AAKE,QAAA,KAAK,EAAE,KAAKD,KAAL,CAAWC,IALpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAjBF,EAwBE,oBAAC,gBAAD;AACE,QAAA,KAAK,EAAEG,MAAM,CAACS,QADhB;AAEE,QAAA,OAAO,EAAE,mBAAM;AACb,cAAIC,IAAI,GAAG,MAAI,CAACd,KAAL,CAAWC,IAAX,CAAgBc,WAAhB,GAA8BC,IAA9B,EAAX;;AACAnB,UAAAA,EAAE,CAACiB,IAAD,CAAF,IACA,MAAI,CAACF,QAAL,CAAc;AAAEV,YAAAA,MAAM,EAAEL,EAAE,CAACiB,IAAD,CAAF,CAASZ;AAAnB,WAAd,GACA,MAAI,CAACU,QAAL,CAAc;AAAET,YAAAA,YAAY,EAAEN,EAAE,CAACiB,IAAD,CAAF,CAASG;AAAzB,WAAd,CAFA,IAIAC,KAAK,CAACC,KAAN,CAAY,yCAAZ,CAJA;AAKD,SATH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAUE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEf,MAAM,CAACgB,UAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAVF,CAxBF,EAoCE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAACC,UAAAA,aAAa,EAAC,KAAf;AAAqBC,UAAAA,SAAS,EAAC;AAA/B,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKtB,KAAL,CAAWE,MAAX,CAAkBqB,GAAlB,CAAsB,UAACC,IAAD,EAAOC,KAAP,EAAiB;AACtC,eACE,oBAAC,iBAAD;AACE,UAAA,SAAS,EAAE,MAAI,CAACzB,KAAL,CAAWE,MAAX,CAAkBuB,KAAlB,CADb;AAEE,UAAA,UAAU,EAAE,MAAI,CAACzB,KAAL,CAAWG,YAAX,CAAwBsB,KAAxB,CAFd;AAGE,UAAA,WAAW,EAAEA,KAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,OARA,CADH,CApCF,CADF;AAkDD;;;;EA5D8B9B,KAAK,CAAC+B,S;;SAAlB3B,G;AA+DrB,IAAMK,MAAM,GAAGuB,UAAU,CAACC,MAAX,CAAkB;AAC/BvB,EAAAA,SAAS,EAAE;AACTwB,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,eAAe,EAAE;AAFR,GADoB;AAK/BnB,EAAAA,QAAQ,EAAE;AACRoB,IAAAA,SAAS,EAAE,EADH;AAERC,IAAAA,KAAK,EAAE,KAFC;AAGRV,IAAAA,SAAS,EAAE,QAHH;AAIRW,IAAAA,MAAM,EAAE,EAJA;AAKRC,IAAAA,SAAS,EAAE,QALH;AAMRC,IAAAA,WAAW,EAAE,CANL;AAORC,IAAAA,YAAY,EAAC;AAPL,GALqB;AAc/BvB,EAAAA,QAAQ,EAAE;AACRmB,IAAAA,KAAK,EAAE,KADC;AAERC,IAAAA,MAAM,EAAE,EAFA;AAGRX,IAAAA,SAAS,EAAE,QAHH;AAIRe,IAAAA,OAAO,EAAE,EAJD;AAKRC,IAAAA,MAAM,EAAE;AALA,GAdqB;AAqB/BlB,EAAAA,UAAU,EAAE;AACVc,IAAAA,SAAS,EAAE,QADD;AAEV1B,IAAAA,QAAQ,EAAE,EAFA;AAGV+B,IAAAA,UAAU,EAAE;AAHF,GArBmB;AA0B/B9B,EAAAA,SAAS,EAAE;AACTuB,IAAAA,KAAK,EAAE,GADE;AAETC,IAAAA,MAAM,EAAE,GAFC;AAGTO,IAAAA,UAAU,EAAE;AAHH;AA1BoB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  Text,\r\n  View,\r\n  StyleSheet,\r\n  TextInput,\r\n  TouchableOpacity,\r\n  Image,\r\n  Alert\r\n} from 'react-native';\r\nimport { Header } from 'react-native-elements';\r\nimport db from './localdb';\r\nimport PhonicSoundButton from './components/PhonicSoundButton';\r\n\r\nexport default class App extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      text: '',\r\n      chunks: [],\r\n      phonicSounds: [],\r\n    };\r\n  }\r\n  render() {\r\n    return (\r\n      <View style={styles.container}>\r\n        <Header\r\n          backgroundColor={'#9c8210'}\r\n          centerComponent={{\r\n            text: 'Monkey Chunky',\r\n            style: { color: '#fff', fontSize: 20 },\r\n          }}\r\n        />\r\n\r\n        <Image\r\n          style={styles.imageIcon}\r\n          source={{\r\n            uri:\r\n              'https://www.shareicon.net/data/128x128/2015/08/06/80805_face_512x512.png',\r\n          }}\r\n        />\r\n\r\n        <TextInput\r\n          style={styles.inputBox}\r\n          onChangeText={text => {\r\n            this.setState({ text: text });\r\n          }}\r\n          value={this.state.text}\r\n        />\r\n        <TouchableOpacity\r\n          style={styles.goButton}\r\n          onPress={() => {\r\n            var word = this.state.text.toLowerCase().trim();\r\n            db[word]?(\r\n            this.setState({ chunks: db[word].chunks }),\r\n            this.setState({ phonicSounds: db[word].phones })\r\n            ):\r\n            Alert.alert(\"The word does not exist in our database\");\r\n          }}>\r\n          <Text style={styles.buttonText}>GO</Text>\r\n        </TouchableOpacity>\r\n        <View style={{flexDirection:\"row\",alignSelf:\"center\"}}>\r\n          {this.state.chunks.map((item, index) => {\r\n            return (\r\n              <PhonicSoundButton\r\n                wordChunk={this.state.chunks[index]}\r\n                soundChunk={this.state.phonicSounds[index]}\r\n                buttonIndex={index}\r\n              />\r\n            );\r\n          })}\r\n        </View>\r\n      </View>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: '#b8b8b8',\r\n  },\r\n  inputBox: {\r\n    marginTop: 50,\r\n    width: '80%',\r\n    alignSelf: 'center',\r\n    height: 40,\r\n    textAlign: 'center',\r\n    borderWidth: 4,\r\n    borderRadius:20\r\n  },\r\n  goButton: {\r\n    width: '50%',\r\n    height: 55,\r\n    alignSelf: 'center',\r\n    padding: 10,\r\n    margin: 10,\r\n  },\r\n  buttonText: {\r\n    textAlign: 'center',\r\n    fontSize: 30,\r\n    fontWeight: 'bold',\r\n  },\r\n  imageIcon: {\r\n    width: 150,\r\n    height: 150,\r\n    marginLeft: 95,\r\n  }\r\n});\r\n"]},"metadata":{},"sourceType":"module"}